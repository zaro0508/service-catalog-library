AWSTemplateFormatVersion: "2010-09-09"
Description: 'AWS Batch with Fargate'
Metadata:
  cfn-lint:
    config:
      ignore_checks:  # Ignore cfn-lint errors for PyPlate.
        - W2001
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Container Image
        Parameters:
          - Image
          - Memory
          - Command
      - Label:
          default: Environment
        Parameters:
          - Secrets
          - EnvVars
      - Label:
          default: Schedule Job
        Parameters:
          - EnableSchedule
          - Schedule
Parameters:
  Image:
    Type: String
    Description: >
      The container image to run, must be from a public dockerhub or AWS ECR repository.
    Default: "debian:latest"
    ConstraintDescription: >
      Must be a valid dockerhub or AWS ECR container image
      Example: debian:latest or 111111111.dkr.ecr.us-east-1.amazonaws.com/MY-IMAGE:latest
  Memory:
    Description: >
      The amount (in MiB) of memory for the container. Mapping of memory to CpuShares for the
      container is 1024:0.25, 2048:0.5, 4096:1, 10240:2, 18432:4  More info at
      https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-batch-jobdefinition-resourcerequirement.html
    Type: String
    Default: "1024"
    AllowedValues:
      - "1024"
      - "2048"
      - "4096"
      - "10240"
      - "18432"
    ConstraintDescription: >
      Memory and CPU shares must be a matched set, the relationship can be found at
      https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-batch-jobdefinition-resourcerequirement.html
  EnableSchedule:
    Description: >
      true to run on a schedule, false to disable. If enabled a valid Schedule must be provided
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  Command:
    Type: String
    Description: >
      A pipe seperated list of commands to pass to the container image (i.e. echo|hello|world)
    ConstraintDescription: >
      Must be a pipe delimited string of commands
  Schedule:
    Description: >
      Schedule to execute the docker, can be a rate or a cron schedule. Format at
      https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html
    Type: String
    Default: rate(7 days)  # Run once a week
    ConstraintDescription: "Use schedule format: https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html"
  Secrets:
    Type: String
    NoEcho: true
    Default: '"SECRET1":"Shh1"'
    Description: >
      The secrets passed to the docker container (i.e. "SECRET1":"Shh1","SECRET2":"Shh2")
    ConstraintDescription: 'Must be in "Key":"Value" form'
  EnvVars:
    Type: CommaDelimitedList
    Default: 'SCHEDULED_JOB_VAR1=one'
    Description: >
      The environment variables passed to the docker container (i.e. VAR1=One,VAR2=Two)
    ConstraintDescription: 'Must be in Key=Value form'
Transform: [PyPlate]
Mappings:
  VpcuMemoryMap:
    "1024":
      CpuShares: 0.25
    "2048":
      CpuShares: 0.50
    "4096":
      CpuShares: 1
    "10240":
      CpuShares: 2
    "18432":
      CpuShares: 4
Resources:
  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - E3008
    Properties:
      Type: MANAGED
      State: ENABLED
      ServiceRole: !Ref ServiceRole
      ComputeResources:
        Type: FARGATE
        MaxvCpus: 1
        Subnets:
          - !ImportValue us-east-1-scheduledjobsvpc-PrivateSubnet
          - !ImportValue us-east-1-scheduledjobsvpc-PrivateSubnet1
          - !ImportValue us-east-1-scheduledjobsvpc-PrivateSubnet2
        SecurityGroupIds:
          - !Ref SecurityGroup
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'batch.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole'
  JobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      ComputeEnvironmentOrder:
        - ComputeEnvironment: !Ref ComputeEnvironment
          Order: 1
      Priority: 1
      State: ENABLED
  SchedulingPolicy:
    Type: AWS::Batch::SchedulingPolicy
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - E3001
    Properties:
      FairsharePolicy:
        ShareDecaySeconds: 5
        ComputeReservation: 2
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !ImportValue us-east-1-scheduledjobsvpc-VPCId
      GroupDescription: !Sub 'SC for ${AWS::StackName}}'
  JobSecrets:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      SecretString: !Sub '{ ${Secrets} }'
  # Allow read access to JobSecrets
  # https://docs.aws.amazon.com/mediaconnect/latest/ug/iam-policy-examples-asm-secrets.html
  SecretsAccessPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetResourcePolicy
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
              - secretsmanager:ListSecretVersionIds
            Resource:
              - !Ref JobSecrets
          - Effect: Allow
            Action: secretsmanager:ListSecrets
            Resource: '*'
  JobDefinition:
    Metadata:
      cfn-lint:
        config:
          ignore_checks:  # Ignore cfn-lint errors for PyPlate.
            - E3002
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      JobDefinitionName: { Ref: "AWS::StackName" }
      PropagateTags: True
      PlatformCapabilities:
        - FARGATE
      Timeout:
        AttemptDurationSeconds: 600
      RetryStrategy:
        Attempts: 1
      ContainerProperties:
        Command: !Split [ "|" , !Ref Command ]
        Image: !Ref Image
        Environment: |
          #!PyPlate
          output = []
          for tag in params['EnvVars']:
             key, value = tag.split('=')
             output.append({"Name": key, "Value": value})
        Secrets:
          - {"Name":"SCHEDULED_JOB_SECRETS", "ValueFrom":!Ref JobSecrets}
        ResourceRequirements:
          - Type: MEMORY
            Value: !Ref Memory
          - Type: VCPU
            Value: !FindInMap [VpcuMemoryMap, !Ref Memory, CpuShares]
        JobRoleArn: !GetAtt JobRole.Arn
        ExecutionRoleArn: !GetAtt ExecutionRole.Arn
        LogConfiguration:
          LogDriver: awslogs
          Options:
            "awslogs-group": !Ref LogGroup
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
     AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ecs-tasks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
     ManagedPolicyArns:
       - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
       - !Ref SecretsAccessPolicy
  JobRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ecs-tasks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join [ '', [ '/', { Ref: 'AWS::StackName' }, '/log' ] ]
      RetentionInDays: 14
  BatchTrigger:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: 'https://bootstrap-awss3cloudformationbucket-19qromfd235z9.s3.amazonaws.com/lambda-batch-trigger/0.1.0/lambda-batch-trigger.yaml'
      Parameters:
        JobName: !Ref AWS::StackName
        JobQueue: !Ref JobQueue
        JobDefinition: !Ref JobDefinition
        EnableSchedule: !Ref EnableSchedule
        Schedule: !Ref Schedule
Outputs:
  SubmitJobApi:
    Value: !GetAtt [BatchTrigger, Outputs.SubmitJobApi]
  JobSecretsArn:
    Value: !Ref JobSecrets
  Jobs:
    Value: !Sub 'https://console.aws.amazon.com/batch/home?region=${AWS::Region}#jobs'
  JobQueue:
    Value: !Sub 'https://console.aws.amazon.com/batch/home?region=${AWS::Region}#queues/detail/${JobQueue}'
  JobDefinitions:
    Value: !Sub 'https://console.aws.amazon.com/batch/home?region=${AWS::Region}#job-definition'
  ComputeEnvironment:
    Value: !Sub 'https://console.aws.amazon.com/batch/home?region=${AWS::Region}#compute-environments/detail/${ComputeEnvironment}'
  Logs:
    Value: !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/$252F${AWS::StackName}$252Flog'
